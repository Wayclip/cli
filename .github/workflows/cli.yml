name: Wayclip CLI publish to AUR and Release AppImage

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build_and_publish:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - name: Checkout CLI repository (this one)
        uses: actions/checkout@v4
        with:
          path: cli

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential pkg-config libglib2.0-dev libssl-dev libpq-dev libssh2-1-dev \
            libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavfilter-dev libavdevice-dev libswresample-dev \
            libwayland-dev libxkbcommon-dev libpipewire-0.3-dev libdbus-1-dev \
            libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libx11-dev libxrandr-dev libxtst-dev libasound2-dev

      - name: Set Environment from Tag and API
        run: |
          echo "PKG_VER=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          CORE_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/Wayclip/core/releases/latest" | jq -r '.tag_name')
          if [ -z "$CORE_TAG" ] || [ "$CORE_TAG" == "null" ]; then
            echo "Error: Failed to fetch latest core tag from GitHub API."
            exit 1
          fi
          echo "CORE_VER=${CORE_TAG#v}" >> $GITHUB_ENV
          echo "Using Core version: ${CORE_TAG#v}"

      - name: Download and Extract Core release tarball
        run: |
          mkdir -p core
          echo "Available assets in latest release:"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/Wayclip/core/releases/latest" | \
            jq -r '.assets[] | .name'
          TARBALL_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/Wayclip/core/releases/latest" | \
            jq -r '.assets[] | select(.name == "wayclip-v${{ env.CORE_VER }}-x86_64-unknown-linux-gnu.tar.gz") | .browser_download_url')
          if [ -z "$TARBALL_URL" ]; then
            echo "Error: Could not find tarball wayclip-v${{ env.CORE_VER }}-x86_64-unknown-linux-gnu.tar.gz in latest release."
            exit 1
          fi
          curl -s -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$TARBALL_URL" | \
            tar -xzf - -C core
          echo "Extracted core tarball contents:"
          ls -lR core
          # Verify binaries exist
          for bin in core/wayclip-binaries/daemon core/wayclip-binaries/trigger; do
            [ -f "$bin" ] || { echo "Error: Binary $bin not found in tarball"; exit 1; }
          done

      - name: Build CLI binary
        run: |
          echo "Building CLI binary..."
          cd cli
          cargo build --release
          cd ..
          [ -f cli/target/release/wayclip_cli ] || { echo "Error: wayclip_cli binary not found"; exit 1; }

      - name: Prepare artifacts for release and upload
        run: |
          mkdir -p release_binaries
          cp core/wayclip-binaries/daemon release_binaries/
          cp core/wayclip-binaries/trigger release_binaries/
          cp cli/target/release/wayclip_cli release_binaries/
          echo "Binaries collected:"
          ls -l release_binaries
          for bin in release_binaries/daemon release_binaries/trigger release_binaries/wayclip_cli; do
            [ -f "$bin" ] || { echo "Error: $bin not found"; exit 1; }
          done

      - name: Upload binaries for release job
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries
          path: release_binaries/

      - name: Generate PKGBUILD for AUR
        run: |
          cat <<EOF > PKGBUILD
          # Maintainer: konyogony <dev@wayclip.com>
          pkgname=wayclip-cli
          pkgver=${{ env.PKG_VER }}
          pkgrel=1
          pkgdesc="The CLI interface for Wayclip, an instant replay tool built for the Linux community."
          arch=('x86_64')
          url="https://github.com/wayclip/cli"
          license=('MIT')
          depends=('bzip2' 'elfutils' 'gstreamer' 'glib2' 'libffi' 'libunwind' 'openssl' 'pcre2' 'util-linux-libs' 'xz' 'zlib' 'zstd')
          makedepends=('rust' 'cargo')
          provides=('wayclip-cli')
          conflicts=('wayclip-cli')

          source=("\$pkgname-\$pkgver.tar.gz::\${url}/archive/refs/tags/v\$pkgver.tar.gz"
                  "wayclip-core.tar.gz::https://github.com/Wayclip/core/releases/download/v${{ env.CORE_VER }}/wayclip-v${{ env.CORE_VER }}-x86_64-unknown-linux-gnu.tar.gz")

          prepare() {
            tar -xzf "\$srcdir/\$pkgname-\$pkgver.tar.gz" -C "\$srcdir/"
            tar -xzf "\$srcdir/wayclip-core.tar.gz" -C "\$srcdir/"
            cd "\$srcdir/cli-\$pkgver"
            cargo fetch
          }

          build() {
            export RUSTUP_TOOLCHAIN=stable
            cd "\$srcdir/cli-\$pkgver"
            cargo build --release
          }

          package() {
            install -Dm755 "\$srcdir/cli-\$pkgver/target/release/wayclip_cli" "\$pkgdir/usr/bin/wayclip-cli"
            install -Dm755 "\$srcdir/wayclip-binaries/daemon" "\$pkgdir/usr/bin/wayclip-daemon"
            install -Dm755 "\$srcdir/wayclip-binaries/trigger" "\$pkgdir/usr/bin/wayclip-trigger"
            install -Dm644 "\$srcdir/cli-\$pkgver/assets/wayclip-daemon.service" "\$pkgdir/usr/lib/systemd/user/wayclip-daemon.service"
          }
          EOF

      - name: Publish to AUR
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgbuild: ./PKGBUILD
          pkgname: "wayclip-cli"
          assets: "cli/assets/wayclip-daemon.service"
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: "Update to version v${{ env.PKG_VER }}"
          updpkgsums: "true"
          ssh_keyscan_types: "rsa,ecdsa,ed25519"

  release:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: build_and_publish
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: cli

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          name: release-binaries
          path: release_binaries

      - name: Set Environment from Tag
        run: echo "PKG_VER=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Install FUSE
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2

      - name: Build AppImage
        run: |
          mkdir -p AppDir/usr/bin
          cp release_binaries/* AppDir/usr/bin/
          cp cli/assets/wayclip-cli.desktop AppDir/
          cp cli/assets/wayclip-cli.png AppDir/

          chmod +x AppDir/usr/bin/*

          cat <<EOF > AppDir/AppRun
          #!/bin/sh
          exec "\$APPDIR/usr/bin/wayclip_cli" "\$@"
          EOF

          chmod +x AppDir/AppRun
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ARCH=x86_64 ./appimagetool-x86_64.AppImage AppDir wayclip-cli-${{ env.PKG_VER }}-x86_64.AppImage

      - name: Create Release and Upload AppImage
        uses: softprops/action-gh-release@v1
        with:
          files: wayclip-cli-${{ env.PKG_VER }}-x86_64.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
